const { SlashCommandBuilder } = require('@discordjs/builders');

module.exports = {
	data: new SlashCommandBuilder()
		.setName('eval')
		.setDescription('Run some JS Code cause why not!')
		.addStringOption(option =>
			option.setName('code')
				.setDescription('What you running boss?')
				.setRequired(true)),
	async execute(interaction) {

		const client = interaction.client;

		if(interaction.user.toString() == '<@97470053615673344>') {
            try {
                const clean = async (text) => {
                    // If our input is a promise, await it before continuing
                    if (text && text.constructor.name == "Promise")
                      text = await text;
                    
                    // If the response isn't a string, `util.inspect()`
                    // is used to 'stringify' the code in a safe way that
                    // won't error out on objects with circular references
                    // (like Collections, for example)
                    if (typeof text !== "string")
                      text = require("util").inspect(text, { depth: 1 });
                    
                    // Replace symbols with character code alternatives
                    text = text
                      .replace(/`/g, "`" + String.fromCharCode(8203))
                      .replace(/@/g, "@" + String.fromCharCode(8203));
                    
                    // Send off the cleaned up result
                    return text;
                    }
                // Evaluate (execute) our input
                const evaled = eval(interaction.options.getString('code'));
          
                // Put our eval result through the function
                // we defined above
                const cleaned = await clean(evaled);
          
                // Reply in the channel with our result
                interaction.reply(`\`\`\`js\n${cleaned}\n\`\`\``);
              } catch (err) {
                // Reply in the channel with our error
                interaction.reply(`\`ERROR\` \`\`\`xl\n\n\`\`\``);
              }                    
		}
		else{
			await interaction.reply({ content: 'ummm your not tristan', ephemeral: true });
		}


	},
};